diff --git a/.env b/.env
new file mode 100644
index 000000000..1c681f336
--- /dev/null
+++ b/.env
@@ -0,0 +1,6 @@
+RAILS_ENV=development
+SHELL=/usr/local/bin/zsh
+DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
+RAILS_SERVE_STATIC_FILES=enabled
+DISABLE_DATABASE_ENVIRONMENT_CHECK=1
+VIRTUAL_HOST=localhost
\ No newline at end of file
diff --git a/Dockerfile b/Dockerfile
index 40744ae2e..b50c69ad6 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,5 +1,5 @@
-# Use Ruby 2.4.9 as base image
-FROM ruby:2.4.9
+# Use Ruby 2.4.10 as base image
+FROM ruby:2.4.10
 
 ENV DEBIAN_FRONTEND noninteractive
 
@@ -16,6 +16,7 @@ RUN echo 'Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bi
 RUN chmod 0440 /etc/sudoers.d/secure_path
 
 COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
+COPY scripts/wait-for-it.sh /usr/local/bin/wait-for-it.sh
 
 # Define where our application will live inside the image
 ENV RAILS_ROOT /var/www/consul
@@ -39,10 +40,10 @@ COPY Gemfile_custom Gemfile_custom
 RUN gem install bundler
 
 # Finish establishing our Ruby environment
-RUN bundle install --full-index
+#RUN bundle install --full-index
 
 # Install Chromium for E2E integration tests
-RUN apt-get update -qq && apt-get install -y chromium
+#RUN apt-get update -qq && apt-get install -y chromium
 
 # Copy the Rails application into place
 COPY . .
diff --git a/app/controllers/custom/users/registrations_controller.rb b/app/controllers/custom/users/registrations_controller.rb
new file mode 100644
index 000000000..f4dd1ab41
--- /dev/null
+++ b/app/controllers/custom/users/registrations_controller.rb
@@ -0,0 +1,99 @@
+class Users::RegistrationsController < Devise::RegistrationsController
+  prepend_before_action :authenticate_scope!, only: [:edit, :update, :destroy, :finish_signup, :do_finish_signup]
+  before_action :configure_permitted_parameters
+
+  invisible_captcha only: [:create], honeypot: :address, scope: :user
+
+  def new
+    super do |user|
+      user.use_redeemable_code = true if params[:use_redeemable_code].present?
+    end
+  end
+
+  def create
+    build_resource(sign_up_params)
+    if resource.valid?
+      super
+    else
+      render :form_sign_up
+    end
+  end
+
+  def delete_form
+    build_resource({})
+  end
+
+  def delete
+    current_user.erase(erase_params[:erase_reason])
+    sign_out
+    redirect_to root_path, notice: t("devise.registrations.destroyed")
+  end
+
+  def success
+  end
+
+  def finish_signup
+    current_user.registering_with_oauth = false
+    current_user.email = current_user.oauth_email if current_user.email.blank?
+    current_user.validate
+  end
+
+  def do_finish_signup
+    current_user.registering_with_oauth = false
+    if current_user.update(sign_up_params)
+      current_user.send_oauth_confirmation_instructions
+      sign_in_and_redirect current_user, event: :authentication
+    else
+      render :finish_signup
+    end
+  end
+
+  def check_username
+    if User.find_by username: params[:username]
+      render json: { available: false, message: t("devise_views.users.registrations.new.username_is_not_available") }
+    else
+      render json: { available: true, message: t("devise_views.users.registrations.new.username_is_available") }
+    end
+  end
+
+  def form_sign_up
+    @user = User.new
+  end
+
+  private
+
+  def build_username
+    j = 0
+    current_username ||= [current_user.first_name.downcase.strip.gsub(' ', '_'), current_user.last_name.downcase.strip.gsub(' ', '_')].join('_')
+    new_username = current_username
+    loop do
+      new_username = current_username + j.to_s if j.positive?
+      j += 1
+      break if available_username?(new_username)
+    end
+    current_user.username = new_username
+  end
+
+  def available_username?(username)
+    User.where(username: username).blank?
+  end
+
+    def sign_up_params
+      params[:user].delete(:use_redeemable_code) if params[:user].present? && params[:user][:use_redeemable_code].blank?
+      params.require(:user).permit(:username, :first_name, :last_name, :email, :password,
+                                   :password_confirmation, :terms_of_service, :locale,
+                                   :use_redeemable_code)
+    end
+
+    def configure_permitted_parameters
+      devise_parameter_sanitizer.permit(:account_update, keys: [:email])
+    end
+
+    def erase_params
+      params.require(:user).permit(:erase_reason)
+    end
+
+    def after_inactive_sign_up_path_for(resource_or_scope)
+      users_sign_up_success_path
+    end
+end
diff --git a/app/views/custom/devise/_omniauth_form.html.erb b/app/views/custom/devise/_omniauth_form.html.erb
new file mode 100644
index 000000000..961ccd7b1
--- /dev/null
+++ b/app/views/custom/devise/_omniauth_form.html.erb
@@ -0,0 +1,21 @@
+<% if oauth_logins.any? %>
+  <div class="row">
+    <div class="small-12 column">
+      <div class="margin-bottom">
+        <strong><%= t("omniauth.info.#{action}") %></strong>
+      </div>
+    </div>
+
+    <% oauth_logins.each do |login| %>
+      <div class="small-12 medium-6 large-4 column end">
+        <%= link_to t("omniauth.#{login}.name"), send("user_#{login}_omniauth_authorize_path"),
+                    title: t("omniauth.#{login}.#{action}"),
+                    method: :post %>
+      </div>
+    <% end %>
+
+    <div class="small-12 column auth-divider">
+      <span><%= t("omniauth.or_fill") %></span>
+    </div>
+  </div>
+<% end %>
\ No newline at end of file
diff --git a/app/views/custom/devise/menu/_login_items.html.erb b/app/views/custom/devise/menu/_login_items.html.erb
new file mode 100755
index 000000000..179b7abfa
--- /dev/null
+++ b/app/views/custom/devise/menu/_login_items.html.erb
@@ -0,0 +1,27 @@
+<% if user_signed_in? %>
+  <li>
+    <%= layout_menu_link_to t("layouts.header.my_activity_link"),
+                              user_path(current_user),
+                              controller_name == 'users',
+                              rel: "nofollow",
+                              title: t("shared.go_to_page") +
+                                     t("layouts.header.my_activity_link") %>
+  </li>
+  <li>
+    <%= layout_menu_link_to t("layouts.header.my_account_link"),
+                              account_path,
+                              controller_name == 'account',
+                              rel: "nofollow",
+                              title: t("shared.go_to_page") +
+                                     t("layouts.header.my_account_link") %>
+  </li>
+  <li>
+    <%= link_to t("devise_views.menu.login_items.logout"),
+                destroy_user_session_path, rel: "nofollow", method: :delete %>
+  </li>
+<% else %>
+  <li>
+    <%= link_to t("devise_views.menu.login_items.login"),
+                new_user_session_path, rel: "nofollow" %>
+  </li>
+<% end %>
diff --git a/app/views/custom/proposals/new.html.erb b/app/views/custom/proposals/new.html.erb
new file mode 100755
index 000000000..1a6f4d0d9
--- /dev/null
+++ b/app/views/custom/proposals/new.html.erb
@@ -0,0 +1,25 @@
+<div class="proposal-form row">
+
+  <div class="small-12 medium-9 column">
+    <%= back_link_to %>
+
+    <h1><%= t("proposals.new.start_new") %></h1>
+    <div data-alert class="callout primary">
+      <%= link_to help_path(anchor: "proposals"), title: t('shared.target_blank_html'), target: "_blank" do %>
+        <%= t("proposals.new.more_info")%>
+      <% end %>
+    </div>
+    <%= render "proposals/form", form_url: proposals_url %>
+  </div>
+
+  <div class="small-12 medium-3 column">
+    <span class="icon-proposals float-right"></span>
+    <h2><%= t("proposals.new.recommendations_title") %></h2>
+    <ul class="recommendations">
+      <li><%= t("proposals.new.recommendation_one") %></li>
+      <li><%= t("proposals.new.recommendation_two") %></li>
+      <li><%= t("proposals.new.recommendation_three") %></li>
+      <li><%= t("proposals.new.recommendation_four") %></li>
+    </ul>
+  </div>
+</div>
diff --git a/app/views/custom/users/registrations/form_sign_up.html.erb b/app/views/custom/users/registrations/form_sign_up.html.erb
new file mode 100644
index 000000000..470bdd52c
--- /dev/null
+++ b/app/views/custom/users/registrations/form_sign_up.html.erb
@@ -0,0 +1,57 @@
+<% provide :title do %><%= t("devise_views.users.registrations.new.title") %><% end %>
+<h2><%= t("devise_views.users.registrations.new.title") %></h2>
+
+<%= form_for(@user, as: :user, url: registration_path(:user)) do |f| %>
+  <%= render 'shared/errors', resource: @user %>
+
+  <p>
+    <%= t("devise_views.users.registrations.new.organization_signup",
+        signup_link: link_to(t("devise_views.users.registrations.new.organization_signup_link"), new_organization_registration_path)).html_safe %>
+  </p>
+
+  <div class="row">
+    <div class="small-12 column">
+
+      <%= f.hidden_field :use_redeemable_code %>
+      <%= f.hidden_field :locale, value: I18n.locale %>
+
+      <%= f.label :username %>
+      <p class="help-text" id="username-help-text"><%= t("devise_views.users.registrations.new.username_note") %></p>
+      <%= f.text_field :username,  autofocus: true, maxlength: User.username_max_length,
+                                   placeholder: t("devise_views.users.registrations.new.username_label"),
+                                   label: false,
+                                   aria: {describedby: "username-help-text"} %>
+
+      <%= f.invisible_captcha :family_name %>
+
+      <%= f.email_field :email,     placeholder: t("devise_views.users.registrations.new.email_label") %>
+
+
+      <%= f.password_field :password, autocomplete: "off",
+                           placeholder: t("devise_views.users.registrations.new.password_label") %>
+
+      <%= f.password_field :password_confirmation, autocomplete: "off",
+                           label: t("devise_views.users.registrations.new.password_confirmation_label"),
+                           placeholder: t("devise_views.users.registrations.new.password_confirmation_label") %>
+
+      <% if @user.use_redeemable_code %>
+        <%= f.text_field :redeemable_code, placeholder: t("devise_views.users.registrations.new.redeemable_code") %>
+      <% end %>
+
+      <%= f.label :terms_of_service do %>
+        <%= f.check_box :terms_of_service, title: t('devise_views.users.registrations.new.terms_title'), label: false %>
+        <span class="checkbox">
+          <%= t("devise_views.users.registrations.new.terms",
+              terms: link_to(t("devise_views.users.registrations.new.terms_link"), "/conditions",
+              title: t('shared.target_blank_html'),
+              target: "_blank")).html_safe %>
+        </span>
+      <% end %>
+      <div class="small-12 medium-6 small-centered">
+        <%= f.submit t("devise_views.users.registrations.new.submit"), class: "button expanded" %>
+      </div>
+    </div>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
diff --git a/app/views/custom/users/registrations/new.html.erb b/app/views/custom/users/registrations/new.html.erb
new file mode 100755
index 000000000..877e4df2a
--- /dev/null
+++ b/app/views/custom/users/registrations/new.html.erb
@@ -0,0 +1,5 @@
+<% provide :title do %><%= t("devise_views.users.registrations.new.title") %><% end %>
+<h2><%= t("devise_views.users.registrations.new.title") %></h2>
+
+<%= render 'devise/omniauth_form' %>
+
diff --git a/app/views/devise/_omniauth_form.html.erb b/app/views/devise/omniauth_form.html.erb
similarity index 100%
rename from app/views/devise/_omniauth_form.html.erb
rename to app/views/devise/omniauth_form.html.erb
diff --git a/config/routes/custom/devise.rb b/config/routes/custom/devise.rb
new file mode 100644
index 000000000..707e914d6
--- /dev/null
+++ b/config/routes/custom/devise.rb
@@ -0,0 +1,28 @@
+devise_for :users, controllers: {
+                     registrations: "users/registrations",
+                     sessions: "users/sessions",
+                     confirmations: "users/confirmations",
+                     omniauth_callbacks: "users/omniauth_callbacks"
+                   }
+
+devise_scope :user do
+  patch "/user/confirmation", to: "users/confirmations#update", as: :update_user_confirmation
+  get '/users/sign_up_form', to: 'users/registrations#form_sign_up'
+  get "/user/registrations/check_username", to: "users/registrations#check_username"
+  get "users/sign_up/success", to: "users/registrations#success"
+  get "users/registrations/delete_form", to: "users/registrations#delete_form"
+  delete "users/registrations", to: "users/registrations#delete"
+  get :finish_signup, to: "users/registrations#finish_signup"
+  patch :do_finish_signup, to: "users/registrations#do_finish_signup"
+end
+
+devise_for :organizations, class_name: "User",
+           controllers: {
+             registrations: "organizations/registrations",
+             sessions: "devise/sessions"
+           },
+           skip: [:omniauth_callbacks]
+
+devise_scope :organization do
+  get "organizations/sign_up/success", to: "organizations/registrations#success"
+end
diff --git a/docker-compose.yml b/docker-compose.yml
index d6ee7443d..1e2b236d3 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -9,20 +9,19 @@ services:
 
     # persist the database between containers by storing it in a volume
     volumes:
-      - docker-example-postgres:/var/lib/postgresql/data
+      - postgres_database:/var/lib/postgresql/data
 
   # service configuration for our dockerized Rails app
   app:
 
     # use the Dockerfile next to this file
     build: .
-    entrypoint: /usr/local/bin/entrypoint.sh
+    entrypoint: /usr/local/bin/wait-for-it.sh database:5432 -- /usr/local/bin/entrypoint.sh
     command: bundle exec rails s -p 3000 -b "0.0.0.0"
     working_dir: /var/www/consul
 
     # rely on the RAILS_ENV value of the host machine
-    # environment:
-    #RAILS_ENV: $RAILS_ENV
+    env_file: .env
 
     # makes the app container aware of the DB container
     depends_on:
@@ -35,9 +34,10 @@ services:
     volumes:
       - .:/var/www/consul:delegated
       - bundle:/usr/local/bundle:delegated
-      - "$SSH_AUTH_SOCK:/tmp/agent.sock"
-    environment:
-      - SSH_AUTH_SOCK=/tmp/agent.sock
 volumes:
-  docker-example-postgres: {}
+  postgres_database: {}
   bundle: {}
+# networks:
+  # default:
+    # external:
+      # name: nginxproxy_default
diff --git a/scripts/entrypoint.sh b/scripts/entrypoint.sh
index e3a7bede6..21c937099 100755
--- a/scripts/entrypoint.sh
+++ b/scripts/entrypoint.sh
@@ -10,8 +10,7 @@ usermod -u "$USER_UID" consul 2> /dev/null
 groupmod -g "$USER_GID" consul 2> /dev/null
 usermod -g "$USER_GID" consul 2> /dev/null
 
-chown -R -h "$USER_UID" "$BUNDLE_PATH"
-chgrp -R -h "$USER_GID" "$BUNDLE_PATH"
+chown -R -h "consul" "/usr/local/bundle"
+chgrp -R -h "consul" "/usr/local/bundle"
 
 /usr/bin/sudo -EH -u consul "$@"
-
diff --git a/scripts/wait-for-it.sh b/scripts/wait-for-it.sh
new file mode 100755
index 000000000..92cbdbb3c
--- /dev/null
+++ b/scripts/wait-for-it.sh
@@ -0,0 +1,182 @@
+#!/usr/bin/env bash
+# Use this script to test if a given TCP host/port are available
+
+WAITFORIT_cmdname=${0##*/}
+
+echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }
+
+usage()
+{
+    cat << USAGE >&2
+Usage:
+    $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]
+    -h HOST | --host=HOST       Host or IP under test
+    -p PORT | --port=PORT       TCP port under test
+                                Alternatively, you specify the host and port as host:port
+    -s | --strict               Only execute subcommand if the test succeeds
+    -q | --quiet                Don't output any status messages
+    -t TIMEOUT | --timeout=TIMEOUT
+                                Timeout in seconds, zero for no timeout
+    -- COMMAND ARGS             Execute command with args after the test finishes
+USAGE
+    exit 1
+}
+
+wait_for()
+{
+    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
+        echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
+    else
+        echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"
+    fi
+    WAITFORIT_start_ts=$(date +%s)
+    while :
+    do
+        if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then
+            nc -z $WAITFORIT_HOST $WAITFORIT_PORT
+            WAITFORIT_result=$?
+        else
+            (echo > /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) >/dev/null 2>&1
+            WAITFORIT_result=$?
+        fi
+        if [[ $WAITFORIT_result -eq 0 ]]; then
+            WAITFORIT_end_ts=$(date +%s)
+            echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"
+            break
+        fi
+        sleep 1
+    done
+    return $WAITFORIT_result
+}
+
+wait_for_wrapper()
+{
+    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
+    if [[ $WAITFORIT_QUIET -eq 1 ]]; then
+        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
+    else
+        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
+    fi
+    WAITFORIT_PID=$!
+    trap "kill -INT -$WAITFORIT_PID" INT
+    wait $WAITFORIT_PID
+    WAITFORIT_RESULT=$?
+    if [[ $WAITFORIT_RESULT -ne 0 ]]; then
+        echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
+    fi
+    return $WAITFORIT_RESULT
+}
+
+# process arguments
+while [[ $# -gt 0 ]]
+do
+    case "$1" in
+        *:* )
+        WAITFORIT_hostport=(${1//:/ })
+        WAITFORIT_HOST=${WAITFORIT_hostport[0]}
+        WAITFORIT_PORT=${WAITFORIT_hostport[1]}
+        shift 1
+        ;;
+        --child)
+        WAITFORIT_CHILD=1
+        shift 1
+        ;;
+        -q | --quiet)
+        WAITFORIT_QUIET=1
+        shift 1
+        ;;
+        -s | --strict)
+        WAITFORIT_STRICT=1
+        shift 1
+        ;;
+        -h)
+        WAITFORIT_HOST="$2"
+        if [[ $WAITFORIT_HOST == "" ]]; then break; fi
+        shift 2
+        ;;
+        --host=*)
+        WAITFORIT_HOST="${1#*=}"
+        shift 1
+        ;;
+        -p)
+        WAITFORIT_PORT="$2"
+        if [[ $WAITFORIT_PORT == "" ]]; then break; fi
+        shift 2
+        ;;
+        --port=*)
+        WAITFORIT_PORT="${1#*=}"
+        shift 1
+        ;;
+        -t)
+        WAITFORIT_TIMEOUT="$2"
+        if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi
+        shift 2
+        ;;
+        --timeout=*)
+        WAITFORIT_TIMEOUT="${1#*=}"
+        shift 1
+        ;;
+        --)
+        shift
+        WAITFORIT_CLI=("$@")
+        break
+        ;;
+        --help)
+        usage
+        ;;
+        *)
+        echoerr "Unknown argument: $1"
+        usage
+        ;;
+    esac
+done
+
+if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then
+    echoerr "Error: you need to provide a host and port to test."
+    usage
+fi
+
+WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15}
+WAITFORIT_STRICT=${WAITFORIT_STRICT:-0}
+WAITFORIT_CHILD=${WAITFORIT_CHILD:-0}
+WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}
+
+# Check to see if timeout is from busybox?
+WAITFORIT_TIMEOUT_PATH=$(type -p timeout)
+WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2>/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)
+
+WAITFORIT_BUSYTIMEFLAG=""
+if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then
+    WAITFORIT_ISBUSY=1
+    # Check if busybox timeout uses -t flag
+    # (recent Alpine versions don't support -t anymore)
+    if timeout &>/dev/stdout | grep -q -e '-t '; then
+        WAITFORIT_BUSYTIMEFLAG="-t"
+    fi
+else
+    WAITFORIT_ISBUSY=0
+fi
+
+if [[ $WAITFORIT_CHILD -gt 0 ]]; then
+    wait_for
+    WAITFORIT_RESULT=$?
+    exit $WAITFORIT_RESULT
+else
+    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
+        wait_for_wrapper
+        WAITFORIT_RESULT=$?
+    else
+        wait_for
+        WAITFORIT_RESULT=$?
+    fi
+fi
+
+if [[ $WAITFORIT_CLI != "" ]]; then
+    if [[ $WAITFORIT_RESULT -ne 0 && $WAITFORIT_STRICT -eq 1 ]]; then
+        echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"
+        exit $WAITFORIT_RESULT
+    fi
+    exec "${WAITFORIT_CLI[@]}"
+else
+    exit $WAITFORIT_RESULT
+fi
\ No newline at end of file